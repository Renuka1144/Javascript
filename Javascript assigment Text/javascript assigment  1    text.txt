                                                                         Javascript Assigment Text(basic And Dom)


Q.1)  What is javascript?How to use it?
Ans)JavaScript is a text-based programming language used both on the client-side and server-side that allows you to make web pages interactive
        Where HTML and CSS are languages that give structure and style to web pages, JavaScript gives web pages interactive elements that engage a user.
   
Q.2)How many types of Variable in javascrips?
Ans) There are two types of variables in JavaScript : local variable and global variable.

        There are some rules while declaring a JavaScript variable (also known as identifiers).

1.Name must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.
2.After first letter we can use digits (0 to 9), for example value1.
3. JavaScript variables are case sensitive, for example x and X are different variables.

Q.3)Define a Data Types in Js?
Ans)JavaScript is a dynamically typed (also called loosely typed) scripting language. 

        Eight data types Out of which seven data types are Primitive(predefined) and one complex or Non-Primitive.

   Primitive Data Types:
1)Number: JavaScript numbers are always stored in double-precision 64-bit binary format IEEE 754. Unlike other programming languages, you don’t need int, float, etc to declare different numeric values.
                          let num = 2; // Integer 
2)String: JavaScript Strings are similar to sentences. They are made up of a list of characters, which is essentially just an “array of characters, like “Hello GeeksforGeeks” etc.
                                                   let str = "Hello There";
3)Boolean: Represent a logical entity and can have two values: true or false.
                                                        let isCoding = true; // yes
                                                        let isOld = false;      // no
4)Null: This type has only one value that is null.
                                                          let age = null;
5)Undefined: A variable that has not been assigned a value is undefined.
                                   let x;
                                   console.log(x);  // undefined
6)Symbol: Symbols return unique identifiers that can be used to add unique property keys to an object that won’t collide with keys of any other code that might add to the object.
7)BigInt: BigInt is a built-in object in JavaScript that provides a way to represent whole numbers larger than 253-1.
Non-Primitive Data Types:
Object:
JavaScript objects are fundamental data structures used to store collections of data. They consist of key-value pairs and can be created using curly braces {} or the new keyword. Understanding objects is crucial, as everything in JavaScript is essentially an object.

Q.4)Write a mul function which will work properly when invoked with following syntax?
Ans)The MUL function is a miniature of the multiplication function. In this function, we call the function that required an argument as a first number, and that function calls another function that required another argument and this step goes on. 

Q.5)What the deference beween Undefined and Undeclare in javascript?
Ans)Difference between undeclared and undefined variables:

                                                       Undeclared                                                                                                                                     Undefined

1)These are the variable that do not exist in the memory heap.                        1)These variable are the ones thatdo exist in momory but nothing is being 
                                                                                                                                                 assigned to them explicity by the programmer.

2)The variable are considered to be undeclared because of                                  2)The variable are considered to be undefined because it is assigned by javascrip to them.

    does not write them with var,let,const.
3)if we try to access them in the code execution phase than javascript will      3)if we try access these variable we all get the undefinde as value.
     throw a reference error.
    

Q.10)what is conditional statement?
Ans)A conditional statement is characterized by the presence of “if” as an antecedent and “then” as a consequent. A conditional statement,
        also known as an “if-then” statement consists of two parts:

        The “if” clause (hypothesis): This part presents a condition, situation, or assertion. It is the initial condition that is being considered.
         The “then” clause (conclusion): This part indicates the consequence, result, or action that will occur if the condition presented in the “if” clause
          is true or satisfied. 

Q.14)write a javascript exercise to get the extension of a filename?
Ans)JavaScript programming topics:

     .  JavaScript String split()
     .  Javascript String substring()
     .  JavaScript String lastIndexOf()
Q.15)What is the result of the expression (5 > 3 && 2 < 4)?
Ans)The result of the expression `(5 > 3 && 2 < 4)` can be evaluated as follows:

1. `5 > 3` evaluates to `true` because `5` is indeed greater than `3`.
2. `2 < 4` evaluates to `true` because `2` is less than `4`.

Now, let's break down the entire expression `(5 > 3 && 2 < 4)`:

- `5 > 3` is `true`.
- `2 < 4` is `true`.

In JavaScript, the `&&` (logical AND) operator returns `true` if both operands are `true`, otherwise it returns `false`.

Therefore, when you evaluate `(5 > 3 && 2 < 4)`, you are essentially evaluating `true && true`, which results in `true`.

Hence, the result of the expression `(5 > 3 && 2 < 4)` is `true`.

Q.16) What is the result of the expression (true && 1 && "hello")?
Ans)To evaluate the expression `(true && 1 && "hello")`, we need to understand how the logical AND (`&&`) operator works in JavaScript.

The `&&` operator in JavaScript performs a logical AND operation between two operands. Here's how it behaves:

1. If both operands are `true`, the `&&` operator returns the last operand.
2. If any operand is `false`, the `&&` operator short-circuits and returns `false` without evaluating the remaining operands.

Let's break down the expression `(true && 1 && "hello")`:

1. `true` is a boolean value that evaluates to `true`.
2. `1` is a truthy value (non-zero number), which also evaluates to `true`.
3. `"hello"` is a non-empty string, which is considered a truthy value and evaluates to `true`.

Now, evaluating the expression step by step:

- `true && 1` evaluates to `1` (the last operand), because both `true` and `1` are truthy values.
- `1 && "hello"` evaluates to `"hello"`, because both `1` (truthy) and `"hello"` (truthy) are true values.

Therefore, the result of the expression `(true && 1 && "hello")` is `"hello"`. This is because the `&&` operator returns the last truthy 
value among the operands, and `"hello"` is the last operand in this expression.

Q.17)What is the result of the expression true && false || false && true? 
Ans)To evaluate the expression `true && false || false && true`, we need to understand the operator precedence and how logical AND (`&&`) and logical OR (`||`) operators work in JavaScript.

The expression `true && false || false && true` involves both `&&` (logical AND) and `||` (logical OR) operators. In JavaScript, the logical AND (`&&`) operator has higher precedence than the logical OR (`||`) operator.

Let's break down the evaluation step by step:

1. **Evaluate `true && false`:**
   - The expression `true && false` evaluates to `false` because one of the operands (`false`) is `false`.

2. **Evaluate `false && true`:**
   - The expression `false && true` also evaluates to `false` because one of the operands (`false`) is `false`.

3. **Evaluate the entire expression using `||` (logical OR):**
   - Now we have `false || false`.
   - The `||` operator returns `true` if at least one of the operands is `true`. In this case, both operands (`false`) are `false`.
   - Therefore, `false || false` evaluates to `false`.

Hence, the result of the expression `true && false || false && true` is `false`. This is because the logical AND (`&&`) operator evaluated to
 `false`, and then the logical OR (`||`) operator also resulted in `false` based on the evaluated operands.

Q.18)What is a Loop and Switch case in Javascript defined that?
Ans)Loop:Loops are used in JavaScript to perform repeated tasks based on a condition. Conditions typically return true or false. A loop will continue
running until the defined condition returns false.

for Loop
Syntax
for (initialization; condition; finalExpression) {
  // code
}
Switch:In programming, a switch statement is a control-flow statement that tests the value of an expression against multiple cases.

This is the basic syntax for a switch statement:

switch (expression) {
  case 1:
   //this code will execute if the case matches the expression
    break;
  case 2:
   //this code will execute if the case matches the expression
    break;
  case 3:
   //this code will execute if the case matches the expression
    break;
  default:
    //this code will execute if none of the cases match the expression
    break;
}

Q.19)What is a use of a Nan Function?
Ans)NaN stands for "Not a Number" and is a value in JavaScript used to represent an undefined or unrepresentable value. NaN is the result of an operation that was supposed to return a number, but couldn't because of an error or undefined/empty value. For example, dividing zero by zero or attempting to parse a string that doesn't contain a valid number will result in NaN.
        
Use:  The JavaScript isNaN() Function is used to check whether a given value is an illegal number or not. It returns true if the value is a NaN else returns false. It is different from the Number.isNaN() Method.

Q.20)What is the difference between && and || in javascript?
Ans)JavaScript defines the two operators && and || which represent the logical AND and OR operations, respectively. Using only the two boolean values true and false, we can generate the following truth tables:

                                                          // Logical AND operation                                                                //Logical OR operation

                                               
                                                       true && true; // true                                                                               true ||true;true
                                                       true && false; // false                                                                              true || false;true
                                                        false && true; // false                                                                             false ||true; true                                                                                 
                                                        false && false; // false                                                                             false || false;false

Q.21)What is the use of Void(0)?
Ans)The void keyword in JavaScript, is used to evaluate an expression which does not return any value. The void operator is an unary operator that 
        accepts the single operand, which may be of any type. The importance of the void keyword come into role when we just need to evaluate an 
        expression instead of returning its value. It means, by using it, we can prevent the browser from displaying the result of the execution of the 
         expression.

Q.22)Cheak Number is Positive or Negative in javascript?
Ans) we are using a switch statement to check a number’s sign (positive, negative, or zero) based on Math.sign() method, this method is used to know 
        the sign of a number, indicating whether the number specified is negative or positive.

Syntax:

switch (expression) {
    case value1:
        statement1;
        break;
    case value2:
        statement2;
        break;
    . . .
    case valueN:
        statementN;
        break;
    default:
        statementDefault;
}
Example: In this example, we are using the above-explained approach


function numberChecking(num) {
    switch (Math.sign(num)) {
        case 1:
            console.log("The number is Positive");
            break;
        case -1:
            console.log("The number is Negative");
            break;
        default:
            console.log("The number is Zero");
    }
}
 
numberChecking(12);
// Output: Positive
numberChecking(-1);
// Output: Negative
numberChecking(0);
// Output: Zero
Output
The number is Positive
The number is Negative
The number is Zero

Q.23)Find the character is vowel or not?
Ans)Approaches to find if a character is a vowel or consonant
        Using conditional Statements
        Using JavaScript array and .include method
        Using Regular expression
Method 1: Using conditional statements
In this method, we will use if-else conditional statements to check if the letter is a vowel or not and display the output result.

Example: This example demonstrates the conditional statements for vowels and consonants.


function checkChar(char){ 
    ch  = char.toLowerCase();  
    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') 
    return console.log("Given character is a Vowel"); 
    return console.log("Given character is a Consonent"); 
} 
  
  
checkChar('G'); 
checkChar('A')
Output
Given character is a Consonent
Given character is a Vowel
Method 2: Using JavaScript array and Array .includes() method
In this method, we will use JavaScript array of vowels and use includes method to check if given character is present in the array then it is a vowel and consonant otherwise.

Example: In this example, we will check if vowels array includes the input cahracter or not.


function checkChar(char){ 
    ch  = char.toLowerCase();  
    const arr = ['a','e','i','o','u']  
    if(arr.includes(ch)) 
    return console.log("Given character is a Vowel"); 
    return console.log("Given character is a Consonent"); 
} 
  
checkChar('E'); 
checkChar('J');
Output
Given character is a Vowel
Given character is a Consonent
Method 3: Using JavaScript regular expression
In this method, we will create a regular expression for the vowels and test if the given input char satisfy the regex condition.

Example: In this example, we will implement regex for the vowels and output the result.


function checkChar(char){ 
    ch  = char.toLowerCase();  
    const regex = /^[aeiou]$/i; 
    if(regex.test(ch)) 
    return console.log("Given character is a Vowel"); 
    return console.log("Given character is a Consonent"); 
} 
  
  
checkChar('I'); 
checkChar('Z');
Output
Given character is a Vowel
Given character is a Consonent

Q.24)write to check whether number is positive,negative or zero?
Ans) if a number is positive, negative, or zero, for numerous mathematical operations and conditional statements in JavaScript. It is critical to know if a given number is positive, negative, or zero. This article provides a straightforward approach in JavaScript that lets you determine whether a given number belongs to one of these groups.

       Several methods can be used to Check if a number is Positive, Negative, or Zero.

Table of Content

.    Using Switch Statement:
Approach 1: Using Switch Statement
In this approach, we are using a switch statement to check a number’s sign (positive, negative, or zero) based on Math.sign() method, this method is used to know the sign of a number, indicating whether the number specified is negative or positive.

Syntax:

switch (expression) {
    case value1:
        statement1;
        break;
    case value2:
        statement2;
        break;
    . . .
    case valueN:
        statementN;
        break;
    default:
        statementDefault;
}
Example: In this example, we are using the above-explained approach


function numberChecking(num) {
    switch (Math.sign(num)) {
        case 1:
            console.log("The number is Positive");
            break;
        case -1:
            console.log("The number is Negative");
            break;
        default:
            console.log("The number is Zero");
    }
}
 
numberChecking(12);
// Output: Positive
numberChecking(-1);
// Output: Negative
numberChecking(0);
// Output: Zero
Output
The number is Positive
The number is Negative
The number is Zero

Q.25)write to check whether number is even or odd usin Ternary opration in javascript?
Ans) In the number system any natural number that can be expressed in the form of (2n + 1) is called an odd number and if the number can be expressed in the form of 
          2n is called an even number.

 Using Ternary Operator
Ternary operator (?:) is a shorthand conditional operator that evaluates a condition and returns one of two expressions based on the result.

Syntax:
condition ? value if true : value if false
Example: In this example, we are using the Ternary operator to find given number is even or odd.


function checkOddOrEven(num) {
    return num % 2 === 0 ? 'Even' : 'Odd';
}
 
console.log(checkOddOrEven(21));
console.log(checkOddOrEven(12));
Output
Odd
Even
















                                                                 